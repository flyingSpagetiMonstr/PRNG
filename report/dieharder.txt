NOTE WELL:  The assessment(s) for the rngs may, in fact, be completely
incorrect or misleading.  In particular, 'Weak' pvalues should occur
one test in a hundred, and 'Failed' pvalues should occur one test in
a thousand -- that's what p MEANS.  Use them at your Own Risk!  Be Warned!

#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
   rng_name    |rands/second|   Seed   |
stdin_input_raw|  5.59e+06  |3117132868|
#=============================================================================#
        test_name   |ntup| tsamples |psamples|  p-value |Assessment
#=============================================================================#
   diehard_birthdays|   0|       100|     100|0.35094861|  PASSED  
      diehard_operm5|   0|   1000000|     100|0.22984462|  PASSED  
  diehard_rank_32x32|   0|     40000|     100|0.90502801|  PASSED  
    diehard_rank_6x8|   0|    100000|     100|0.40030671|  PASSED  
   diehard_bitstream|   0|   2097152|     100|0.65253188|  PASSED  
        diehard_opso|   0|   2097152|     100|0.80195996|  PASSED  
        diehard_oqso|   0|   2097152|     100|0.24621197|  PASSED  
         diehard_dna|   0|   2097152|     100|0.38850391|  PASSED  
diehard_count_1s_str|   0|    256000|     100|0.21275648|  PASSED  
diehard_count_1s_byt|   0|    256000|     100|0.88326293|  PASSED  
 diehard_parking_lot|   0|     12000|     100|0.31640509|  PASSED  
    diehard_2dsphere|   2|      8000|     100|0.86096361|  PASSED  
    diehard_3dsphere|   3|      4000|     100|0.97695496|  PASSED  
     diehard_squeeze|   0|    100000|     100|0.72618303|  PASSED  
        diehard_sums|   0|       100|     100|0.16579841|  PASSED  
        diehard_runs|   0|    100000|     100|0.47537735|  PASSED  
        diehard_runs|   0|    100000|     100|0.22461414|  PASSED  
       diehard_craps|   0|    200000|     100|0.15362852|  PASSED  
       diehard_craps|   0|    200000|     100|0.88214062|  PASSED  
 marsaglia_tsang_gcd|   0|  10000000|     100|0.11824840|  PASSED  
 marsaglia_tsang_gcd|   0|  10000000|     100|0.95415493|  PASSED  
         sts_monobit|   1|    100000|     100|0.24576306|  PASSED  
            sts_runs|   2|    100000|     100|0.17083840|  PASSED  
          sts_serial|   1|    100000|     100|0.88086075|  PASSED  
          sts_serial|   2|    100000|     100|0.11636477|  PASSED  
          sts_serial|   3|    100000|     100|0.61621473|  PASSED  
          sts_serial|   3|    100000|     100|0.71894339|  PASSED  
          sts_serial|   4|    100000|     100|0.25357184|  PASSED  
          sts_serial|   4|    100000|     100|0.97122462|  PASSED  
          sts_serial|   5|    100000|     100|0.19119960|  PASSED  
          sts_serial|   5|    100000|     100|0.90052943|  PASSED  
          sts_serial|   6|    100000|     100|0.07888574|  PASSED  
          sts_serial|   6|    100000|     100|0.10856684|  PASSED  
          sts_serial|   7|    100000|     100|0.56107078|  PASSED  
          sts_serial|   7|    100000|     100|0.94693768|  PASSED  
          sts_serial|   8|    100000|     100|0.37050071|  PASSED  
          sts_serial|   8|    100000|     100|0.61070018|  PASSED  
          sts_serial|   9|    100000|     100|0.30978409|  PASSED  
          sts_serial|   9|    100000|     100|0.80306163|  PASSED  
          sts_serial|  10|    100000|     100|0.17848777|  PASSED  
          sts_serial|  10|    100000|     100|0.50118435|  PASSED  
          sts_serial|  11|    100000|     100|0.76019249|  PASSED  
          sts_serial|  11|    100000|     100|0.08369979|  PASSED  
          sts_serial|  12|    100000|     100|0.88246485|  PASSED  
          sts_serial|  12|    100000|     100|0.50681893|  PASSED  
          sts_serial|  13|    100000|     100|0.94703904|  PASSED  
          sts_serial|  13|    100000|     100|0.65273933|  PASSED  
          sts_serial|  14|    100000|     100|0.09857414|  PASSED  
          sts_serial|  14|    100000|     100|0.43434650|  PASSED  
          sts_serial|  15|    100000|     100|0.93630613|  PASSED  
          sts_serial|  15|    100000|     100|0.72061861|  PASSED  
          sts_serial|  16|    100000|     100|0.95999905|  PASSED  
          sts_serial|  16|    100000|     100|0.39525346|  PASSED  
         rgb_bitdist|   1|    100000|     100|0.24186844|  PASSED  
         rgb_bitdist|   2|    100000|     100|0.15279840|  PASSED  
         rgb_bitdist|   3|    100000|     100|0.92647319|  PASSED  
         rgb_bitdist|   4|    100000|     100|0.68813253|  PASSED  
         rgb_bitdist|   5|    100000|     100|0.61973965|  PASSED  
         rgb_bitdist|   6|    100000|     100|0.81815354|  PASSED  
         rgb_bitdist|   7|    100000|     100|0.64246906|  PASSED  
         rgb_bitdist|   8|    100000|     100|0.10362051|  PASSED  
         rgb_bitdist|   9|    100000|     100|0.24034714|  PASSED  
         rgb_bitdist|  10|    100000|     100|0.83589942|  PASSED  
         rgb_bitdist|  11|    100000|     100|0.86903957|  PASSED  
         rgb_bitdist|  12|    100000|     100|0.56625219|  PASSED  
rgb_minimum_distance|   2|     10000|    1000|0.07993371|  PASSED  
rgb_minimum_distance|   3|     10000|    1000|0.47524078|  PASSED  
rgb_minimum_distance|   4|     10000|    1000|0.56854382|  PASSED  
rgb_minimum_distance|   5|     10000|    1000|0.48649662|  PASSED  
    rgb_permutations|   2|    100000|     100|0.86442543|  PASSED  
    rgb_permutations|   3|    100000|     100|0.63079510|  PASSED  
    rgb_permutations|   4|    100000|     100|0.39049366|  PASSED  
    rgb_permutations|   5|    100000|     100|0.65745031|  PASSED  
      rgb_lagged_sum|   0|   1000000|     100|0.66617075|  PASSED  
      rgb_lagged_sum|   1|   1000000|     100|0.98714411|  PASSED  
      rgb_lagged_sum|   2|   1000000|     100|0.32079548|  PASSED  
      rgb_lagged_sum|   3|   1000000|     100|0.53130254|  PASSED  
      rgb_lagged_sum|   4|   1000000|     100|0.27196759|  PASSED  
      rgb_lagged_sum|   5|   1000000|     100|0.71206715|  PASSED  
      rgb_lagged_sum|   6|   1000000|     100|0.93959124|  PASSED  
      rgb_lagged_sum|   7|   1000000|     100|0.05866931|  PASSED  
      rgb_lagged_sum|   8|   1000000|     100|0.10141187|  PASSED  
      rgb_lagged_sum|   9|   1000000|     100|0.61169250|  PASSED  
      rgb_lagged_sum|  10|   1000000|     100|0.85692009|  PASSED  
      rgb_lagged_sum|  11|   1000000|     100|0.84014791|  PASSED  
      rgb_lagged_sum|  12|   1000000|     100|0.47866843|  PASSED  
      rgb_lagged_sum|  13|   1000000|     100|0.27880237|  PASSED  
      rgb_lagged_sum|  14|   1000000|     100|0.40242606|  PASSED  
      rgb_lagged_sum|  15|   1000000|     100|0.29093911|  PASSED  
      rgb_lagged_sum|  16|   1000000|     100|0.27487855|  PASSED  
      rgb_lagged_sum|  17|   1000000|     100|0.56000447|  PASSED  
      rgb_lagged_sum|  18|   1000000|     100|0.19295297|  PASSED  
      rgb_lagged_sum|  19|   1000000|     100|0.97765092|  PASSED  
      rgb_lagged_sum|  20|   1000000|     100|0.80062209|  PASSED  
      rgb_lagged_sum|  21|   1000000|     100|0.35864659|  PASSED  
      rgb_lagged_sum|  22|   1000000|     100|0.92032337|  PASSED  
      rgb_lagged_sum|  23|   1000000|     100|0.03165342|  PASSED  
      rgb_lagged_sum|  24|   1000000|     100|0.44169575|  PASSED  
      rgb_lagged_sum|  25|   1000000|     100|0.41233191|  PASSED  
      rgb_lagged_sum|  26|   1000000|     100|0.44551719|  PASSED  
      rgb_lagged_sum|  27|   1000000|     100|0.24569494|  PASSED  
      rgb_lagged_sum|  28|   1000000|     100|0.83610840|  PASSED  
      rgb_lagged_sum|  29|   1000000|     100|0.89764264|  PASSED  
      rgb_lagged_sum|  30|   1000000|     100|0.90315831|  PASSED  
      rgb_lagged_sum|  31|   1000000|     100|0.96562515|  PASSED  
      rgb_lagged_sum|  32|   1000000|     100|0.99991248|   WEAK   
     rgb_kstest_test|   0|     10000|    1000|0.55272124|  PASSED  
     dab_bytedistrib|   0|  51200000|       1|0.00036087|   WEAK   
             dab_dct| 256|     50000|       1|0.92592966|  PASSED  
Preparing to run test 207.  ntuple = 0
        dab_filltree|  32|  15000000|       1|0.87814501|  PASSED  
        dab_filltree|  32|  15000000|       1|0.01821055|  PASSED  
Preparing to run test 208.  ntuple = 0
       dab_filltree2|   0|   5000000|       1|0.45484171|  PASSED  
       dab_filltree2|   1|   5000000|       1|0.37433254|  PASSED  
Preparing to run test 209.  ntuple = 0
        dab_monobit2|  12|  65000000|       1|0.96598512|  PASSED  


#=============================================================================#

/*!
 * @note x = x [op] a, where op is an operation 
 * @attention there is no "break;" in this switch, 
 * and default is "nop"
 */
#define PHI(x, op, a) switch (TO_FOUR(op)) {     \
    case add: (x) += (a);                        \
    case unarys: (x) = TO_TWO(a)? _f[x]: ~(x);   \
    case rshitf: (x) = RSHIFT((x), TO_EIGHT(a)); \
    case xor: (x) ^= (a);                        \
}

void inline update(state_t* state)
{
    #define f (state->f)

    uint8_t old = f[state->i];
    uint8_t A = 0, B = 0, s = 0;

    uint8_t register new = 0; // new value of f[i]
    uint8_t register i_new = 0; // new value of i

    uint8_t register a = state->i;
    uint8_t register b = f[COMPRESS(a + state->x)];
    uint8_t register c = f[COMPRESS(state->x)];
    // for (int cnt = 0; cnt < 3; cnt++)
    {
        PHI(a, b, c); 
        PHI(b, c, a); 
        PHI(c, a, b); 
    }
    new = c;
    new += state->x;
    new += (new == old);

    s = f[c];

    i_new = (state->i)^old;
    PHI(i_new, s, a^b);

    A = f[a]; B = f[b]; 
    PHI(A, s, b);
    PHI(B, s, a);

    // assigning new values: 
    f[a] = B; f[b] = A;
    f[state->i] = new;
    state->i = i_new;
    state->x = GRNG_ITER(state->x);

    #undef f
}

